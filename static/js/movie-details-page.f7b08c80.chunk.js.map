{"version":3,"sources":["components/MovieDetailsPage/MovieDetailsPage.module.css","components/Reviews/Reviews.js","components/MovieDetailsPage/MovieDetailsPage.js"],"names":["module","exports","Reviews","moviesId","useParams","useState","reviews","setReviews","useEffect","Api","then","results","console","log","catch","error","massage","length","content","map","review","author","id","Cast","lazy","MovieDetailsPage","location","useLocation","history","useHistory","useRouteMatch","url","path","movie","setMovie","type","onClick","push","state","from","className","s","sectionMovie","src","poster_path","alt","title","overviewMovie","vote_average","overview","genres","genre","name","to","activeClassName","fallback"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,aAAe,uCAAuC,cAAgB,0C,wJCGzE,SAASC,IACtB,IAAQC,EAAaC,cAAbD,SACR,EAA8BE,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAaA,OAXAC,qBAAU,WACRC,IAAsBN,GACnBO,MAAK,SAAAJ,GACAA,EAAQK,UAAY,KACtBC,QAAQC,IAAIP,EAAQK,SACpBJ,EAAW,YAAID,EAAQK,cAG1BG,OAAM,SAAAC,GAAK,OAAIA,EAAMC,aACvB,CAACb,IAGF,kCACsB,IAAnBG,EAAQW,OACP,yEAEA,+BACE,kCAAKX,EAAQY,WACZZ,GACCA,EAAQa,KAAI,SAAAC,GAAM,OAChB,+BACE,6BAAKA,EAAOC,SACZ,kCAAKD,EAAOF,aAFLE,EAAOE,Y,qBCnBxBC,EAAOC,gBAAK,kBAAM,gCAET,SAASC,IACtB,IAAMC,EAAWC,cACXC,EAAUC,cAEhB,EAAsBC,cAAdC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,KAEL7B,EAAaC,cAAbD,SAER,EAA0BE,mBAAS,IAAnC,mBAAO4B,EAAP,KAAcC,EAAd,KAEA1B,qBAAU,WACRC,IAAsBN,GACnBO,KAAKwB,GACLpB,OAAM,SAAAC,GAAK,OAAIA,EAAMC,aACvB,CAACb,IAMJ,OACE,qCAEE,wBAAQgC,KAAK,SAASC,QAPT,WAAO,IAAD,IACrBR,EAAQS,KAAR,iBAAaX,QAAb,IAAaA,GAAb,UAAaA,EAAUY,aAAvB,aAAa,EAAiBC,YAA9B,QAAsC,MAMpC,qBAGCN,GACC,oCACE,sBAAKO,UAAWC,IAAEC,aAAlB,UACE,8BACE,qBAAKC,IAAG,yCAAoCV,EAAMW,aAAeC,IAAKZ,EAAMa,UAE9E,sBAAKN,UAAWC,IAAEM,cAAlB,UACE,6BAAKd,EAAMa,QACX,6CAAqC,GAArBb,EAAMe,aAAtB,OACA,0CACA,4BAAIf,EAAMgB,WACV,wCACA,6BACGhB,EAAMiB,OAAO/B,KAAI,SAAAgC,GAAK,OACrB,6BAAoBA,EAAMC,MAAjBD,EAAM7B,eAKvB,0BAIHW,GACC,gCACE,uDACA,+BACE,6BACE,cAAC,IAAD,CAASoB,GAAE,UAAKtB,EAAL,SAAiBS,UAAU,GAAGc,gBAAgB,GAAzD,oBAIF,6BACE,cAAC,IAAD,CAASD,GAAE,UAAKtB,EAAL,YAAoBS,UAAU,GAAGc,gBAAgB,GAA5D,6BAOR,uBACA,eAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,IAApB,UACE,cAAC,IAAD,CAAOvB,KAAI,UAAKA,EAAL,SAAX,SACE,cAACT,EAAD,MAGF,cAAC,IAAD,CAAOS,KAAI,UAAKA,EAAL,YAAX,SACE,cAAC9B,EAAD","file":"static/js/movie-details-page.f7b08c80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionMovie\":\"MovieDetailsPage_sectionMovie__3EDPs\",\"overviewMovie\":\"MovieDetailsPage_overviewMovie__2pH5R\"};","import { useParams } from 'react-router';\nimport { useState, useEffect } from 'react';\nimport * as Api from '../../services/Api';\n\nexport default function Reviews() {\n  const { moviesId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    Api.fethReviewsMovies(moviesId)\n      .then(reviews => {\n        if (reviews.results !== []) {\n          console.log(reviews.results);\n          setReviews([...reviews.results]);\n        }\n      })\n      .catch(error => error.massage);\n  }, [moviesId]);\n\n  return (\n    <section>\n      {reviews.length === 0 ? (\n        <p>We don't have any reviews for this movie</p>\n      ) : (\n        <ul>\n          <p> {reviews.content}</p>\n          {reviews &&\n            reviews.map(review => (\n              <li key={review.id}>\n                <h4>{review.author}</h4>\n                <p> {review.content}</p>\n              </li>\n            ))}\n        </ul>\n      )}\n    </section>\n  );\n}\n","import { useState, useEffect, Suspense, lazy } from 'react';\nimport Loader from 'react-loader-spinner';\nimport { useParams } from 'react-router';\nimport { NavLink, Route, useRouteMatch, useLocation, useHistory } from 'react-router-dom';\nimport * as Api from '../../services/Api';\n// import Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\nimport s from './MovieDetailsPage.module.css';\n\nconst Cast = lazy(() => import('../Cast/Cast' /* webpackChunkName: \"cast\" */));\n\nexport default function MovieDetailsPage() {\n  const location = useLocation();\n  const history = useHistory();\n\n  const { url, path } = useRouteMatch();\n\n  const { moviesId } = useParams();\n\n  const [movie, setMovie] = useState('');\n\n  useEffect(() => {\n    Api.fethDetailsMovies(moviesId)\n      .then(setMovie)\n      .catch(error => error.massage);\n  }, [moviesId]);\n\n  const onGoBack = () => {\n    history.push(location?.state?.from ?? '/');\n  };\n\n  return (\n    <>\n      {/* <h1>{`Movie ${moviesId}`}</h1> */}\n      <button type=\"button\" onClick={onGoBack}>\n        Go back\n      </button>\n      {movie && (\n        <section>\n          <div className={s.sectionMovie}>\n            <div>\n              <img src={`https://image.tmdb.org/t/p/w300${movie.poster_path}`} alt={movie.title} />\n            </div>\n            <div className={s.overviewMovie}>\n              <h1>{movie.title}</h1>\n              <p>User Score: {movie.vote_average * 10}%</p>\n              <h2>Overview</h2>\n              <p>{movie.overview}</p>\n              <h3>Genres</h3>\n              <ul>\n                {movie.genres.map(genre => (\n                  <li key={genre.id}>{genre.name}</li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <hr />\n        </section>\n      )}\n\n      {movie && (\n        <div>\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <NavLink to={`${url}/cast`} className=\"\" activeClassName=\"\">\n                Cast\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to={`${url}/reviews`} className=\"\" activeClassName=\"\">\n                Reviews\n              </NavLink>\n            </li>\n          </ul>\n        </div>\n      )}\n      <hr />\n      <Suspense fallback={<Loader />}>\n        <Route path={`${path}/cast`}>\n          <Cast />\n        </Route>\n\n        <Route path={`${path}/reviews`}>\n          <Reviews />\n        </Route>\n      </Suspense>\n    </>\n  );\n}\n"],"sourceRoot":""}